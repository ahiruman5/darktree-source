XSS,"#### 概要・影響
通常、Webアプリケーションには外部からの入力に応じて表示が変化する箇所があり、この部分のHTML生成の実装に問題があると、XSSという脆弱性が生じる。
Cookieを盗まれることによるなりすまし、利用者の権限でのスクリプト実行、偽の入力フォーム表示によるフィッシングなどの影響が発生し得る。

#### 原因
HTML生成の際に、HTMLの文法上特別な意味を持つ特殊記号を正しく扱っていないことにある。これにより、開発者の意図しない形でHTMLやJavaScriptを注入・変形される現象がXSSである。

#### 対策
- *(1) Webページに出力する全ての要素に対してエスケープ処理を施す*
  - HTMLにおける特殊文字 → HTMLエンティティへ
  - HTMLの要素内容については `<` と `&` をエスケープする
  - HTMLの属性値については、ダブルクォートで囲って、 `<` と `”` と `&` をエスケープする
- (2) URLを出力するときは、`http://` や `https://` で始まるURLのみ許可する
  - URLには `javascript://` の形式で始まるものもある。この部分が動的に出力される場合XSSが可能となる場合がある。ホワイトリスト方式で対応する。
- (3) `<script>...</script>` 要素の内容を動的に生成しない
  - scriptタグの要素内容が外部からの入力に応じて動的に出力される場合、任意のスクリプトが埋め込まれてしまう可能性がある。これは認めない。
- (4) スタイルシートを任意のサイトから取り込めるようにしない
  - スタイルシートは `expression()` 等を利用してスクリプトを記述することができる。そのため、スクリプトが埋め込まれてしまう可能性があるため、これを認めない。"
SQLインジェクション,"#### 概要・影響
SQLの呼び出し方に不備がある場合に発生する脆弱性。データベースを操作されてしまうため、情報の閲覧・改竄・消去などの影響が発生し得る。

#### 原因
典型的な原因は、リテラルをはみ出すことでSQL文が変更されること

#### 対策
プレースホルダにより、SQL文を組み立てる。
SQL文の雛形の中に変数の場所を示す記号（これがプレースホルダ。`?` 記号など）を置いて、後からそこに実際の値を機械的な処理で割り当てるもの。プレースホルダに実際の値を割り当てる処理をバインドと呼ぶ。"
CSRF,"#### 概要・影響
クレジットカードの決済などの「重要な処理」の受付に際しては、利用者の意図したリクエストであることを確認する必要がある。しかし、この確認処理が抜けていると、罠サイトを閲覧しただけで利用者のブラウザから勝手に「重要な処理」を実行させられる場合がある。このような問題を引き起こす脆弱性をCSRF脆弱性と呼ぶ。

#### 原因
CSRF脆弱性が生まれる背景として、以下のWebの性質がある。

- form要素のaction属性にはどのドメインのURLでも指定できる
  - => 罠サイトからでも攻撃対象サイトにリクエストを送信できてしまう
- Cookieに保存されたセッションIDは、対象サイトに自動的に送信される
  - => 罠経由のリクエストに対しても、セッションIDのCookie値が送信されてしまう

#### 対策
- (1) 秘密情報（トークン）を埋め込む
  - CSRF対策が必要なページに対して第三者が知り得ない秘密情報を要求する。これによりアプリケーション側で不正かどうかを判別できるようになる
- (2) パスワードの再入力を求める
  - この方法は、やりすぎると使いにくいアプリケーションになってしまう可能性があるので注意する
- (3) Refererをチェックする
  - 「重要な処理」を実行するページではRefererが正しいリンク元かを確認し、正しい場合のみ処理を実行する"
セッションハイジャック,"#### 概要・影響
第三者がセッションIDを悪用してなりすますことをセッションハイジャックと呼ぶ。
第三者がセッションIDを知るための手段は以下の3つに分類される。

- (1) セッションIDの推測
- (2) セッションIDの盗み出し
- (3) セッションIDの強制（セッションID固定化攻撃と関連）

#### 原因
セッションハイジャックは、特定の原因があるのではなく、多くの脆弱性が原因につながる。

#### 対策
- (1) セッションIDを憶測が困難なものにする
  - 推測が容易であるということはなりすましも容易になるということ
  - 言語やフレームワークが備えるセッション管理機構を使うことが現実的
- (2) セッションIDをURLパラメータに格納しない
  - URLパラメータに格納されていると、Refererの送信機能によって遷移先のサイトにセッションIDを漏らしてしまう
  - セッションIDはCookieに格納するか、POSTメソッドのhiddenパラメータに格納して受け渡す
- (3) HTTPS通信で利用するCookieにはsecure属性を加える 
  - secure属性が付与されたCookieはHTTPS通信でのみ利用される。secure属性が無いとHTTP通信でも利用されてしまうため、HTTP通信の盗聴により不正取得される可能性がある
- (4) ログイン成功後に、新しくセッションを開始する
  - ユーザがログインする前からセッションIDを発行してセッションを開始し、そのセッションIDをログイン後も継続して使用する実装がある。このような実装はセッションIDの固定化攻撃に対して脆弱
  - ログインが成功した時点から新しいセッションを開始し、既存のセッションは無効化する
- (5) ログイン成功後に、既存のセッションIDとは別に秘密情報を発行し、ページの遷移ごとにその値を確認する
  - セッションIDとは別にログイン成功後に秘密情報を作成してCookieにセットし、この秘密情報とCookieの値が一致することを全てのページで確認するようにする
  - 上にあげた4つの実装方法を採用している場合、不要である"
オープンリダイレクタ,"#### 概要・影響

#### 原因

#### 対策
"
HTTPヘッダインジェクション,"#### 概要・影響
リダイレクトやCookie発行など、外部からのパラメータを元にHTTPレスポンスヘッダを出力する際に発生する脆弱性。レスポンスヘッダを出力する際のパラメータを中に改行を挿入する攻撃によって、被害者のブラウザ上で以下のどちらかあるいは両方が引き起こされる

- 任意のレスポンスヘッダの追加
- レスポンスボディの偽造

#### 原因
レスポンスヘッダにおいて、改行に特別な意味があるにも関わらず、外部から指定された改行をそのまま出力すること

#### 対策
- HTTPヘッダの出力部分を自前実装せず、ヘッダ出力用のライブラリやAPIを利用する
- レスポンスヘッダを構成する文字列中に改行コードが含まれていないかチェックし、含まれている場合はエラーとして処理を中止する"
ディレクトリトラバーサル,"#### 概要
外部からのパラメータを用い、サーバ上のファイルを指定するWebアプリケーションでは、ファイル名に対するチェックが不十分だと、開発者の意図しないファイルに対して閲覧、改竄、削除ができる場合がある。この脆弱性をディレクトリ・トラバーサル脆弱性と呼ぶ。

#### 原因
以下の3つがある

- ファイル名を外部から指定できること
- ファイル名として、絶対パスや相対パスの形で異なるディレクトリを指定できること
- 組み立てたファイル名に対するアクセスの可否をチェックしていないこと

#### 対策
- (1) 外部からファイル名を指定できる仕様を避ける
- (2) ファイル名にディレクトリ名が含まれないようにする
- (3) ファイル名を英数字に限定する"
OSコマンドインジェクション,"#### 概要・影響
Webアプリケーションの開発に用いる言語の多くには、シェル経由でOSコマンドを呼び出す機能を提供しており、この機能の使い方に問題があると、意図しないOSコマンドが実行可能になる場合がある。これをOSコマンドインジェクション脆弱性と呼ぶ。

#### 原因
- シェル経由でOSコマンドを呼び出す際に、シェルのメタ文字がエスケープされていない
- シェル機能を呼び出せる関数を使用している場合

#### 対策
以下のいずれかで対応する（採用優先度高い順）

- OSコマンド呼び出しを使わない実装方法を選択する
- シェル呼び出し機能のある関数の使用を避ける
- 外部から入力された文字列をコマンドラインのパラメータに渡さない
- OSコマンドに渡すパラメータを安全な関数によりエスケープする"
ブルートフォース攻撃,"#### 概要・影響
総当り攻撃とも。暗号解読方法の1つで、可能な組み合わせを全て試すやり方。

#### 対策
- アカウントロック。一定回数失敗したらアカウントをロックする。"
バッファオーバーフロー,"#### 概要・影響
Webアプリケーションを含むあらゆるプログラムは、処理を行うためにメモリ上に自身が使用する領域を確保する。プログラムが確保した領域外のメモリを上書きしてしまい、意図しないコードを実行してしまう脆弱性をバッファオーバーフロー脆弱性と呼ぶ。

#### 対策
- (1) 直接メモリにアクセスできない言語を使う
- (2) 直接メモリにアクセスできる言語で記述する部分を最小限にする
- (3) 脆弱性が修正されたバージョンのライブラリを使う"
クリックジャッキング,"#### 概要・影響
Webアプリケーションの中にはログイン機能を設け、ログインしている利用者のみが使用可能な機能を提供しているものがある。
該当する機能がマウス操作のみで使用可能な場合、細工された外部サイトを閲覧し操作することにより、利用者が誤操作し、意図しない機能を実行させられる可能性がある。これをクリックジャッキング脆弱性と呼ぶ。

CSRF攻撃と同じレベルの脅威を持つ。

#### 対策
- (1) HTTPレスポンスヘッダに `X-Frame-Options` ヘッダフィールドを出力し、他ドメインのサイトからのframe要素やiframe要素による読み込みを制限する
  - `X-Frame-Options` はクリックジャッキング攻撃から防御するためのヘッダ
- (2) 処理を実行する直前に再度パスワードの入力を求め、再度入力されたパスワードが正しい場合のみ処理を実行する"
SQLインジェクションへの対策として使われるプレースホルダ（静的プレースホルダ、動的プレースホルダ）はなぜ安全なのか,"#### 静的プレースホルダ
静的プレースホルダは、値のバインド処理をデータベースエンジン側で行う方式。
プレースホルダのついたSQLは、そのままデータベースエンジンに送られ、コンパイルなどの実行準備が行われ、SQL文が確定する。次にバインド値がデータベースエンジンに送られ、エンジン側で値を当てはめた後にSQL文が実行される。

プレースホルダの状態でSQL文がコンパイルされるため、後からSQL文が変更される可能性は原理的にあり得ない。

#### 動的プレースホルダ
動的プレースホルダは、SQLを呼び出すアプリケーション側のライブラリ内で、パラメータをバインドしてからデータベースエンジンに送る方式。
バインドにあたり、リテラルは適切に構成されるため、処理系にバグがなければSQLインジェクションは発生しない。

#### 補足
- 静的プレースホルダの方が安全性が高いため、可能な限りこちらを使うべき
- プレースホルダは本来、SQLインジェクション対策のために利用するものではなく、頻繁に利用するSQL文を事前にコンパイルしてキャッシュしておくことでパフォーマンスを向上させるものだった。"
