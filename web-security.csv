front,back
XSS,"#### 概要・影響
通常、Webアプリケーションには外部からの入力に応じて表示が変化する箇所があり、この部分のHTML生成の実装に問題があると、XSSという脆弱性が生じる。
Cookieを盗まれることによるなりすまし、利用者の権限でのスクリプト実行、偽の入力フォーム表示によるフィッシングなどの影響が発生し得る。

#### 原因
HTML生成の際に、HTMLの文法上特別な意味を持つ特殊記号を正しく扱っていないことにある。これにより、開発者の意図しない形でHTMLやJavaScriptを注入・変形される現象がXSSである。

#### 対策
- *(1) Webページに出力する全ての要素に対してエスケープ処理を施す*
  - HTMLにおける特殊文字 → HTMLエンティティへ
  - HTMLの要素内容については `<` と `&` をエスケープする
  - HTMLの属性値については、ダブルクォートで囲って、 `<` と `”` と `&` をエスケープする
- (2) URLを出力するときは、`http://` や `https://` で始まるURLのみ許可する
  - URLには `javascript://` の形式で始まるものもある。この部分が動的に出力される場合XSSが可能となる場合がある。ホワイトリスト方式で対応する。
- (3) `<script>...</script>` 要素の内容を動的に生成しない
  - scriptタグの要素内容が外部からの入力に応じて動的に出力される場合、任意のスクリプトが埋め込まれてしまう可能性がある。これは認めない。
- (4) スタイルシートを任意のサイトから取り込めるようにしない
  - スタイルシートは `expression()` 等を利用してスクリプトを記述することができる。そのため、スクリプトが埋め込まれてしまう可能性があるため、これを認めない。"
SQLインジェクション,"#### 概要・影響
SQLの呼び出し方に不備がある場合に発生する脆弱性。データベースを操作されてしまうため、情報の閲覧・改竄・消去などの影響が発生し得る。

#### 原因
典型的な原因は、リテラルをはみ出すことでSQL文が変更されること

#### 対策
プレースホルダにより、SQL文を組み立てる。
SQL文の雛形の中に変数の場所を示す記号（これがプレースホルダ。`?` 記号など）を置いて、後からそこに実際の値を機械的な処理で割り当てるもの。プレースホルダに実際の値を割り当てる処理をバインドと呼ぶ。"
CSRF,"#### 概要・影響
クレジットカードの決済などの「重要な処理」の受付に際しては、利用者の意図したリクエストであることを確認する必要がある。しかし、この確認処理が抜けていると、罠サイトを閲覧しただけで利用者のブラウザから勝手に「重要な処理」を実行させられる場合がある。このような問題を引き起こす脆弱性をCSRF脆弱性と呼ぶ。

#### 原因
CSRF脆弱性が生まれる背景として、以下のWebの性質がある。

- form要素のaction属性にはどのドメインのURLでも指定できる
  - => 罠サイトからでも攻撃対象サイトにリクエストを送信できてしまう
- Cookieに保存されたセッションIDは、対象サイトに自動的に送信される
  - => 罠経由のリクエストに対しても、セッションIDのCookie値が送信されてしまう

#### 対策
- (1) 秘密情報（トークン）を埋め込む
  - CSRF対策が必要なページに対して第三者が知り得ない秘密情報を要求する。これによりアプリケーション側で不正かどうかを判別できるようになる
- (2) パスワードの再入力を求める
  - この方法は、やりすぎると使いにくいアプリケーションになってしまう可能性があるので注意する
- (3) Refererをチェックする
  - 「重要な処理」を実行するページではRefererが正しいリンク元かを確認し、正しい場合のみ処理を実行する"
セッションハイジャック,
オープンリダイレクタ脆弱性,"#### 概要・影響

#### 原因

#### 対策
"
HTTPヘッダインジェクション,"#### 概要・影響

#### 原因

#### 対策
"
ディレクトリトラバーサル脆弱性 ,"#### 概要・影響

#### 原因

#### 対策
"
OSコマンドインジェクション,"#### 概要・影響

#### 原因

#### 対策
"
ブルートフォース攻撃 とは何か,"#### 概要・影響

#### 原因

#### 対策
"
DoS,"#### 概要・影響

#### 原因

#### 対策
"
DDoS,"#### 概要・影響

#### 原因

#### 対策
"
バッファオーバーフロー,"#### 概要・影響

#### 原因

#### 対策
"
ランサムウェア,"#### 概要・影響

#### 原因

#### 対策
"
クリックジャッキング,"#### 概要・影響

#### 原因

#### 対策
"
SQLインジェクションへの対策として使われるプレースホルダ（静的プレースホルダ、動的プレースホルダ）はなぜ安全なのか,"#### 静的プレースホルダ
静的プレースホルダは、値のバインド処理をデータベースエンジン側で行う方式。
プレースホルダのついたSQLは、そのままデータベースエンジンに送られ、コンパイルなどの実行準備が行われ、SQL文が確定する。次にバインド値がデータベースエンジンに送られ、エンジン側で値を当てはめた後にSQL文が実行される。

プレースホルダの状態でSQL文がコンパイルされるため、後からSQL文が変更される可能性は原理的にあり得ない。

#### 動的プレースホルダ
動的プレースホルダは、SQLを呼び出すアプリケーション側のライブラリ内で、パラメータをバインドしてからデータベースエンジンに送る方式。
バインドにあたり、リテラルは適切に構成されるため、処理系にバグがなければSQLインジェクションは発生しない。

#### 補足
- 静的プレースホルダの方が安全性が高いため、可能な限りこちらを使うべき
- プレースホルダは本来、SQLインジェクション対策のために利用するものではなく、頻繁に利用するSQL文を事前にコンパイルしてキャッシュしておくことでパフォーマンスを向上させるものだった。"
